#!/usr/bin/env python3

"""
Analyse malicious files using online apis

Usage: remote-anal [-h|-v] [-k KEY] URI...

Options:
    -h, --help          Print this help and exit
    -v, --version       Print version and exit
    -k, --apikey KEY    Use KEY to authenticate to the VirusTotal api.
                        If KEY is a path to a file, reads the key from there.
                        Default is ~/.vtsend.key

Arguments:
    URI     URI can be 3 things:
            - an url (identified by the presence of ://) pointing to
              a potentially malicious file
            - a path to a suspicious file
              (if bigger than 32MB, falls back to MD5)
            - a MD5 checksum of a suspicious file
              No key is required for MD5 checksums as VirusTotal isn't used
"""

import re
import os
import sys
import json
import time
import hashlib
import requests
from path       import Path
from docopt     import docopt
from subprocess import getoutput


def api_key(key, *, key_reg=re.compile("[0-9a-f]{64}")):
    if key is not None:
        if key_reg.fullmatch(key) is not None:
            return key

    exp_path = lambda x: Path(x).expanduser()

    path = exp_path(key)
    if not os.path.exists(path):
        path = exp_path("~/.vtsend.key")

    try:
        return open(path).read(64)
    except FileNotFoundError:
        return None


def post_request(command, resource, key):
    # If MD5, use team-cymru's API
    if command == "send_md5":
        return tc_request(resource)

    if command == "md5_report":
        return resource

    # We're using VirusTotal
    if command == "send_file":
        return vt_send(resource, key)

    if command == "scan_url":
        return vt_scan(resource, key)

    if "report" in command:
        return vt_report(command, resource, key)


def vt_send(filename, key):
    url   = "https://www.virustotal.com/vtapi/v2/file/send"
    attr  = {"apikey": key}
    files = {"file": open(filename, 'rb')}
    res   = requests.post(url, data=attr, files=files)

    # TODO: manage time
    if res.status_code == self.HTTP_OK:
        print(res.text)
    else:
        print(res.text)


def vt_scan(resource, key):
    url  = "https://www.virustotal.com/vtapi/v2/url/send"
    attr = {"apikey": key, "url":resource}
    res  = requests.post(url, data=attr)

    # TODO: manage time
    if res.status_code == self.HTTP_OK:
        print(res.text)
    else:
        print(res.text)


def vt_report(resource, key):
    if command == "file_report":
        url = "https://www.virustotal.com/vtapi/v2/file/report"
        res = file_digest(filename, hashlib.sha256)

    elif command == "url_report":
        url = "https://www.virustotal.com/vtapi/v2/md5/report"
        res = resource

    else:
        return None

    response = retrieve_report(res)

    if response.status_code == self.HTTP_OK:
        resmap = json.loads(response.text)
        print(resmap)
    else:
        print(response.text)



def retrieve_report(resource):
    """
    Retrieve Report for the file checksum

    4 retrieval per min if only public API used
    """
    # TODO: manage time
    url = self.URL_BASE + "file/report"
    params = {"apikey": self.apikey, "resource": resource}
    res = requests.post(url, data=params)
    self.has_sent_retrieve_req = True
    return res


def tc_request(resource, *, md5_reg("[0-9a-f]{32}")):
    resource = resource.lower()

    if md5_reg.fullmatch(resource) is None:
        sys.exit("Incorrect hash" + resource)

    return tc_parse(getoutput("whois -h hash.cymru.com " + resource))


def tc_parse(data):
    digest, time, status = getoutput.split()
    result = {"md5": digest, "timestamp": time}

    if status == "NO_DATA":
        result["status"] = "UKNOWN"
    else:
        result = status_from_percentage(int(status))

    return result


def status_from_percentage(positive, total=100):
    ratio = positive * 100 // total

    states = [(  0: "CLEAN" ),
              ( 40: "LOW"   ),
              ( 80: "MEDIUM"),
              ( 99: "HIGH"  ),
              (100: "ALERT" )]

    for rate, state in states:
        if ratio <= rate:
            return state


def file_digest(path, algo=hashlib.md5):
    checksum = algo()
    with open(path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            chucksum.update(data)
    return checksum.hexdigest()


def daemonize(*, UMASK=0, WORKDIR="/", MAXFD=1024):
   """Detach a process from the controlling terminal and run it in the
   background as a daemon.
   """
    if (hasattr(os, "devnull")):
       REDIRECT_TO = os.devnull
    else:
       REDIRECT_TO = "/dev/null"

   try:
      pid = os.fork()
   except OSError, e:
      raise Exception, "%s [%d]" % (e.strerror, e.errno)

   if (pid == 0):
      os.setsid()

      try:
         pid = os.fork()
      except OSError, e:
         raise Exception, "%s [%d]" % (e.strerror, e.errno)

      if (pid == 0):
         os.chdir(WORKDIR)
         os.umask(UMASK)
      else:
         os._exit(0)
   else:
      os._exit(0)

   import resource
   maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
   if (maxfd == resource.RLIM_INFINITY):
      maxfd = MAXFD

   for fd in range(0, maxfd):
      try:
         os.close(fd)
      except OSError:
         pass

   os.open(REDIRECT_TO, os.O_RDWR)

   os.dup2(0, 1)
   os.dup2(0, 2)

   return(0)

def main():
    args = docopt(__doc__, version="vtsend 0.1 - VirusTotal API v2.0")
    key  = api_key(args["--apikey"])
    uris = args["URI"]

    need_daemon = False
    responses   = []
    for uri in uris:
        if "://" in uri:
            if key is None:
                sys.exit("Unable to open file: " + args["--apikey"])
            resp = post_request("scan_url", uri, key)
            need_daemon = True

        elif re.fullmatch("([a-f0-9]|[A-F0-9]){32}", uri):
            resp = post_request("send_md5", uri.lower(), key)

        else:
            path = Path(uri).expanduser()

            # VirusTotal doesn't accept files bigger than 32MB
            if os.stat(path).st_size < 33554432:
                if key is None:
                    sys.exit("Unable to open file: " + args["--apikey"])
                resp = post_request("send_file", uri, key)
                need_daemon = True
            else:
                resp = post_request("send_md5", file_digest(path), key)

        responses.append(resp)

    if need_daemon:
        daemonize()

    for resp in responses:
        post_request(*resp, key)


if __name__ == "__main__":
    main()
